using iNKORE.UI.WPF.Modern.Controls;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Management.Instrumentation;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using static Windows_Malware_Effects_Remediation_Tool.WindowsAPIMethods;

namespace Windows_Malware_Effects_Remediation_Tool
{
    /// <summary>
    /// Interaction logic for RunElevated.xaml
    /// </summary>
    public partial class RunSystem : Window
    {
        public RunSystem()
        {
            InitializeComponent();
            if (Convert.ToInt32(Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool").GetValue("TopMost")) == 1)
                this.Topmost = true;
            runTextBox.Focus();
        }

        private void cancelButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private async void okButton_Click(object sender, RoutedEventArgs e)
        {
            /*try
            {*/
                /*Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\Orange Group\Windows Malware Effects Remediation Tool");
                File.WriteAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\Orange Group\Windows Malware Effects Remediation Tool\PsExec.exe", Properties.Resources.PsExec);
                Process process = new Process();
                process.StartInfo.FileName = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\Orange Group\Windows Malware Effects Remediation Tool\PsExec.exe";
                process.StartInfo.Arguments = "-accepteula -i -s \"" + runTextBox.Text + "\"";
                process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                process.StartInfo.CreateNoWindow = true;
                process.Start();*/

                runTextBox.IsEnabled = false;
                okButton.IsEnabled = false;
                cancelButton.IsEnabled = false;

                // REFERENCES:
                // https://github.com/mbcdev/RunAsTrustedInstaller/
                // https://github.com/valnoxy/TIelevated

                await Task.Run(() =>
                {
                    Process.EnterDebugMode();

                    // 1. Impersonate as SYSTEM for myself
                    // Get the Winlogon PID
                    ProcessStartInfo getWinlogonPID = new ProcessStartInfo()
                    {
                        FileName = "powershell.exe",
                        Arguments = @"-c (Get-CimInstance Win32_Process | Where-Object {$_.ExecutablePath -eq 'C:\Windows\System32\winlogon.exe'}).ProcessId",
                        CreateNoWindow = true,
                        WindowStyle = ProcessWindowStyle.Hidden,
                        RedirectStandardOutput = true,
                        UseShellExecute = false
                    };
                    uint winlogonPID = Convert.ToUInt32(Process.Start(getWinlogonPID).StandardOutput.ReadToEnd());

                    // Get the SYSTEM token
                    var winlogonHandle = OpenProcess((uint)OPEN_PROCESS_TOKEN.PROCESS_ALL_ACCESS, false, winlogonPID);
                    OpenProcessToken(
                        winlogonHandle,
                        (uint)OPEN_PROCESS_TOKEN.TOKEN_QUERY | (uint)OPEN_PROCESS_TOKEN.TOKEN_DUPLICATE,
                        out IntPtr systemToken
                    );

                    SECURITY_ATTRIBUTES securityAttributes = new SECURITY_ATTRIBUTES();

                    // Duplicate the SYSTEM token
                    DuplicateTokenEx(
                        systemToken,
                        TOKEN_ALL_ACCESS,
                        ref securityAttributes,
                        SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation,
                        TOKEN_TYPE.TokenImpersonation,
                        out IntPtr duplicatedSystemToken
                    );

                    // Impersonate the token
                    ImpersonateLoggedOnUser(duplicatedSystemToken);
                    CloseHandle(duplicatedSystemToken);

                    // ------------------------------------------------------------------------------------------------------------------------------------------------------------
                    // 2. Run the target process under TrustedInstaller

                    // Start the TrustedInstaller service
                    ProcessStartInfo startTrustedInstaller = new ProcessStartInfo()
                    {
                        FileName = "net.exe",
                        Arguments = "start TrustedInstaller",
                        CreateNoWindow = true,
                        WindowStyle = ProcessWindowStyle.Hidden,
                    };
                    Process.Start(startTrustedInstaller).WaitForExit();

                    // Get the TrustedInstaller PID
                    ProcessStartInfo powershell = new ProcessStartInfo()
                    {
                        FileName = "powershell.exe",
                        Arguments = @"-c (Get-CimInstance Win32_Process | Where-Object {$_.ExecutablePath -eq 'C:\Windows\servicing\TrustedInstaller.exe'}).ProcessId",
                        CreateNoWindow = true,
                        WindowStyle = ProcessWindowStyle.Hidden,
                        RedirectStandardOutput = true,
                        UseShellExecute = false
                    };
                    uint trustedInstallerPID = Convert.ToUInt32(Process.Start(powershell).StandardOutput.ReadToEnd());

                    // Get the TrustedInstaller token
                    var trustedInstallerHandle = OpenProcess((uint)OPEN_PROCESS_TOKEN.PROCESS_QUERY_INFORMATION, false, trustedInstallerPID);
                    OpenProcessToken(
                        trustedInstallerHandle,
                        (uint)OPEN_PROCESS_TOKEN.TOKEN_QUERY | (uint)OPEN_PROCESS_TOKEN.TOKEN_DUPLICATE,
                        out IntPtr trustedInstallerToken
                    );

                    // Duplicate the TrustedInstaller token
                    DuplicateTokenEx(
                        trustedInstallerToken,
                        (uint)TOKEN_ALL_ACCESS,
                        ref securityAttributes,
                        SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation,
                        TOKEN_TYPE.TokenImpersonation,
                        out IntPtr duplicatedToken
                    );

                    // Creation flags
                    uint creationFlags = (CREATE_UNICODE_ENVIRONMENT | CREATE_NEW_CONSOLE | NORMAL_PRIORITY_CLASS);

                    // Create environment block
                    CreateEnvironmentBlock(out IntPtr environmentBlock, duplicatedToken, false);

                    // Startup info
                    STARTUPINFO startupInfo = new STARTUPINFO();
                    startupInfo.cb = Marshal.SizeOf(typeof(STARTUPINFO));

                    // Start the process with the duplicated token
                    CreateProcessWithTokenW(
                        duplicatedToken, // Our TrustedInstaller token
                        1, // Logon as profile
                        runTextBox.Text, // The process to start
                        null, // No command line arguments
                        creationFlags, // Creation flags
                        environmentBlock, // No environment
                        null, // No current directory
                        ref startupInfo,
                        out PROCESS_INFORMATION processInformation
                    );

                    RevertToSelf();
                });

                await Task.Delay(1000);
                this.Close();
            /*}
            catch
            {
                ContentDialog contentDialog = new ContentDialog();
                contentDialog.Title = "Error";
                contentDialog.Content = $@"There was an error starting the process ""{runTextBox.Text}"". Make sure you typed the name correctly and try again.";
                contentDialog.PrimaryButtonText = "OK";
                contentDialog.DefaultButton = ContentDialogButton.Primary;
                await contentDialog.ShowAsync();

                runTextBox.IsEnabled = true;
                okButton.IsEnabled = true;
                cancelButton.IsEnabled = true;
            }*/
        }

        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }

        private void Window_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Return)
            {
                if (okButton.IsEnabled == true)
                {
                    okButton_Click(sender, e);
                }
                else { }
            }
        }
    }
}
