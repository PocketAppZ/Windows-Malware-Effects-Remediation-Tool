using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.StartPanel;
using static Windows_Malware_Effects_Remediation_Tool.RepairClasses;

namespace Windows_Malware_Effects_Remediation_Tool
{
    /// <summary>
    /// Interaction logic for AutomaticRepair.xaml
    /// </summary>
    public partial class AutomaticRepair : Window
    {
        public AutomaticRepair(bool separateDrive)
        {
            InitializeComponent();
            if (Convert.ToInt32(Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool").GetValue("TopMost")) == 1)
                this.Topmost = true;
            DiagnoseIssues();
            separateDriveFix = separateDrive;
        }

        public static bool separateDriveFix = false;

        private RepairClasses repairClasses = new RepairClasses();

        public async void DiagnoseIssues()
        {
            // Load Registry hives from target drive if separateDrive is true
            if (separateDriveFix == true)
            {
                LoadSeparateHive();
            }

            // Initialise HKLM and HKCU paths
            RegistryKey hklmSoftwarePath;
            RegistryKey hklmSystemPath;
            RegistryKey hkcuPath;

            if (separateDriveFix == true)
            {
                hklmSoftwarePath = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware", true);
                hklmSystemPath = Registry.LocalMachine.OpenSubKey(@"OfflineSystem", true);
                hkcuPath = Registry.LocalMachine.OpenSubKey(@"OfflineUser", true);
            }
            else
            {
                hklmSoftwarePath = Registry.LocalMachine.OpenSubKey(@"SOFTWARE", true);
                hklmSystemPath = Registry.LocalMachine.OpenSubKey(@"SYSTEM", true);
                hkcuPath = Registry.CurrentUser;
            }

            // Iterate through the list of possible fixes and check if a fix is needed
            foreach (var fix in repairClasses.fixInformation)
            {
                var name = fix.Name;
                var fixType = fix.Type;
                var path = fix.Path;
                var key = fix.Key;
                var value = fix.Value;
                var nullable = fix.Nullable;

                for (int i = 0; i < fixType.Count; i++)
                {
                    if (fix.IsSelected == false)
                    {
                        if (fixType[i] == FixType.Registry)
                        {
                            // Determine Registry hive
                            RegistryKey registryKey;
                            if (path[i].Contains(@"HKEY_LOCAL_MACHINE\SOFTWARE"))
                            {
                                registryKey = hklmSoftwarePath.CreateSubKey(path[i].Replace(@"HKEY_LOCAL_MACHINE\SOFTWARE\", ""), true);
                            }
                            else if (path[i].Contains(@"HKEY_LOCAL_MACHINE\SYSTEM"))
                            {
                                registryKey = hklmSystemPath.CreateSubKey(path[i].Replace(@"HKEY_LOCAL_MACHINE\SYSTEM\", ""), true);
                            }
                            else if (path[i].Contains("HKEY_CURRENT_USER"))
                            {
                                registryKey = hkcuPath.CreateSubKey(path[i].Replace(@"HKEY_CURRENT_USER\", ""), true);
                            }
                            else
                            {
                                throw new Exception($@"The fix ""{name}"" was not configured correctly in RepairClasses: Invalid hive in Path (Registry)");
                            }

                            // If Registry key exists and value is incorrect, add to the checklistbox
                            if (registryKey.GetValue(key[i]) != null && registryKey.GetValue(key[i]).ToString() != value[i])
                            {
                                // Define binding
                                Binding binding = new Binding("RepairClasses.FixTask.IsSelected");
                                binding.NotifyOnSourceUpdated = true;
                                binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;

                                // Add to checklistbox
                                /*CheckBox checkBox = new CheckBox();
                                checkBox.Content = name;
                                checkBox.SetBinding(CheckBox.IsCheckedProperty, binding);
                                checkBox.IsChecked = true;*/
                                fix.IsSelected = true;
                                fixList.Items.Add(fix);
                            }
                            registryKey.Dispose();
                        }
                        else
                        {
                            // Add to checklistbox
                            CheckBox checkBox = new CheckBox();
                            checkBox.Content = name;
                            checkBox.IsChecked = true;
                            fixList.Items.Add(checkBox);
                            fix.IsSelected = true;
                        }
                    }
                }
            }

            // Show the checklistbox
            await Delay(5000); //time waster
            searchingForProblems.Visibility = Visibility.Collapsed;
            searchingForProblemsProgressBar.Visibility = Visibility.Collapsed;
            if (fixList.Items.Count == 0)
            {
                searchComplete.Visibility = Visibility.Visible;
                searchCompleteDescription.Visibility = Visibility.Visible;
                applyFix.Visibility = Visibility.Visible;
                fixList.Visibility = Visibility.Visible;
                goodToGo.Visibility = Visibility.Visible;
                applyFix.IsEnabled = false;
            }
            else
            {
                searchComplete.Visibility = Visibility.Visible;
                searchCompleteDescription.Visibility = Visibility.Visible;
                applyFix.Visibility = Visibility.Visible;
                fixList.Visibility = Visibility.Visible;
            }

            // Unload Registry hives if separateDrive is true
            if (separateDriveFix == true)
            {
                UnloadSeparateHive();
            }
        }

        private void applyFix_Click(object sender, RoutedEventArgs e)
        {
            // Hide the checklistbox and show the progress bar
            searchComplete.Visibility = Visibility.Collapsed;
            searchCompleteDescription.Visibility = Visibility.Collapsed;
            applyFix.Visibility = Visibility.Collapsed;
            fixList.Visibility = Visibility.Collapsed;
            attemptingRepairs.Visibility = Visibility.Visible;
            attemptingRepairsProgressBar.Visibility = Visibility.Visible;

            // Load Registry hives from target drive if separateDrive is true
            if (separateDriveFix == true)
            {
                LoadSeparateHive();
            }

            // Initialise HKLM and HKCU paths
            RegistryKey hklmSoftwarePath;
            RegistryKey hklmSystemPath;
            RegistryKey hkcuPath;

            if (separateDriveFix == true)
            {
                hklmSoftwarePath = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware", true);
                hklmSystemPath = Registry.LocalMachine.OpenSubKey(@"OfflineSystem", true);
                hkcuPath = Registry.LocalMachine.OpenSubKey(@"OfflineUser", true);
            }
            else
            {
                hklmSoftwarePath = Registry.LocalMachine.OpenSubKey(@"SOFTWARE", true);
                hklmSystemPath = Registry.LocalMachine.OpenSubKey(@"SYSTEM", true);
                hkcuPath = Registry.CurrentUser;
            }
            foreach (var fix in repairClasses.fixInformation)
            {
                var name = fix.Name;
                var fixType = fix.Type;
                var path = fix.Path;
                var key = fix.Key;
                var value = fix.Value;
                var nullable = fix.Nullable;

                for (int i = 0; i < fixType.Count; i++)
                {
                    if (fix.IsSelected == true)
                    {
                        if (fixType[i] == FixType.Registry)
                        {
                            // Determine Registry hive
                            RegistryKey registryKey;
                            if (path[i].Contains(@"HKEY_LOCAL_MACHINE\SOFTWARE"))
                            {
                                registryKey = hklmSoftwarePath.OpenSubKey(path[i].Replace(@"HKEY_LOCAL_MACHINE\SOFTWARE\", ""), true);
                            }
                            else if (path[i].Contains(@"HKEY_LOCAL_MACHINE\SYSTEM"))
                            {
                                registryKey = hklmSystemPath.OpenSubKey(path[i].Replace(@"HKEY_LOCAL_MACHINE\SYSTEM\", ""), true);
                            }
                            else if (path[i].Contains("HKEY_CURRENT_USER"))
                            {
                                registryKey = hkcuPath.OpenSubKey(path[i].Replace(@"HKEY_CURRENT_USER\", ""), true);
                            }
                            else
                            {
                                throw new Exception($@"The fix ""{name}"" was not configured correctly in RepairClasses: Invalid hive in Path (Registry)");
                            }

                            // Perform the fix
                            if (nullable[i] == true)
                            {
                                registryKey.DeleteValue(key[i]);
                            }
                            else
                            {
                                registryKey.SetValue(key[i], value[i]);
                            }

                            registryKey.Dispose();
                        }
                    }
                }
            }
        }

        private async void LoadSeparateHive()
        {
            string mountPoint;
            string username;

            RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
            mountPoint = checkOperationsLocation.GetValue("MountPoint").ToString();
            username = checkOperationsLocation.GetValue("TargetUsername").ToString();

            Process loadHiveUser = new Process();
            loadHiveUser.StartInfo.FileName = "reg.exe";
            loadHiveUser.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
            loadHiveUser.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            loadHiveUser.Start();

            Process loadHiveSoftware = new Process();
            loadHiveSoftware.StartInfo.FileName = "reg.exe";
            loadHiveSoftware.StartInfo.Arguments = @"load ""HKLM\OfflineSoftware"" """ + mountPoint + @"\Windows\System32\config\SOFTWARE" + @"""";
            loadHiveSoftware.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            loadHiveSoftware.Start();

            Process loadHiveSystem = new Process();
            loadHiveSystem.StartInfo.FileName = "reg.exe";
            loadHiveSystem.StartInfo.Arguments = @"load ""HKLM\OfflineSystem"" """ + mountPoint + @"\Windows\System32\config\SYSTEM" + @"""";
            loadHiveSystem.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            loadHiveSystem.Start();
            await Delay(500);
        }

        private void UnloadSeparateHive()
        {
            Process unloadHiveUser = new Process();
            unloadHiveUser.StartInfo.FileName = "reg.exe";
            unloadHiveUser.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
            unloadHiveUser.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            unloadHiveUser.Start();

            Process unloadHiveSoftware = new Process();
            unloadHiveSoftware.StartInfo.FileName = "reg.exe";
            unloadHiveSoftware.StartInfo.Arguments = @"unload ""HKLM\OfflineSoftware""";
            unloadHiveSoftware.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            unloadHiveSoftware.Start();

            Process unloadHiveSystem = new Process();
            unloadHiveSystem.StartInfo.FileName = "reg.exe";
            unloadHiveSystem.StartInfo.Arguments = @"unload ""HKLM\OfflineSystem""";
            unloadHiveSystem.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            unloadHiveSystem.Start();
        }


        /*private async void Main2(bool separateDrive)
        {
            List<string> list = new List<string>();
            //Registry Editor Check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHiveUser = new Process();
                    loadHiveUser.StartInfo.FileName = "reg.exe";
                    loadHiveUser.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHiveUser.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHiveUser.Start();
                    Process loadHiveSoftware = new Process();
                    loadHiveSoftware.StartInfo.FileName = "reg.exe";
                    loadHiveSoftware.StartInfo.Arguments = @"load ""HKLM\OfflineSoftware"" """ + mountPoint + @"\Windows\System32\config\SOFTWARE" + @"""";
                    loadHiveSoftware.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHiveSoftware.Start();
                    Process loadHiveSystem = new Process();
                    loadHiveSystem.StartInfo.FileName = "reg.exe";
                    loadHiveSystem.StartInfo.Arguments = @"load ""HKLM\OfflineSystem"" """ + mountPoint + @"\Windows\System32\config\SYSTEM" + @"""";
                    loadHiveSystem.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHiveSystem.Start();
                    await Delay(500);

                    RegistryKey checkregistryeditor = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int?)checkregistryeditor.GetValue("DisableRegistryTools") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableRegistryEditorCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkregistryeditor = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int?)checkregistryeditor.GetValue("DisableRegistryTools") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableRegistryEditorCheckBox);
                    }
                }
                catch { }
            }




            //Task Manager Check 
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checktaskmanager = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int?)checktaskmanager.GetValue("DisableTaskMgr") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableTaskManagerCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checktaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int?)checktaskmanager.GetValue("DisableTaskMgr") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableTaskManagerCheckBox);
                    }
                }
                catch { }
            }


            //Command Prompt Check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkcmd = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Policies\Microsoft\Windows\System");
                    if (checkcmd.GetValue("DisableCMD") != null)
                    {
                        if ((int)checkcmd.GetValue("DisableCMD") != 0)
                        {

                        }
                        else
                        {
                            fixList.Items.Remove(reenableCommandPromptCheckBox);
                        }
                    }
                    else
                    {
                        fixList.Items.Remove(reenableCommandPromptCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkcmd = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System");
                    if (checkcmd.GetValue("DisableCMD") != null)
                    {
                        if ((int)checkcmd.GetValue("DisableCMD") != 0)
                        {

                        }
                        else
                        {
                            fixList.Items.Remove(reenableCommandPromptCheckBox);
                        }
                    }
                    else
                    {
                        fixList.Items.Remove(reenableCommandPromptCheckBox);
                    }
                }
                catch { }
            }



            //User Account Control Check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkuac = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int)checkuac.GetValue("EnableLUA") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorUser") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorAdmin") == 0)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableUserAccountControlCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int)checkuac.GetValue("EnableLUA") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorUser") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorAdmin") == 0)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableUserAccountControlCheckBox);
                    }
                }
                catch { }
            }



            //Themes check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkthemes = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                    if ((int?)checkthemes.GetValue("NoThemesTab") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableThemeSettingsCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkthemes = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                    if ((int?)checkthemes.GetValue("NoThemesTab") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableThemeSettingsCheckBox);
                    }
                }
                catch { }
            }



            //Wallpaper check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkwallpaper = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\ActiveDesktop");
                    RegistryKey checkforcedwallpaper = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int?)checkwallpaper.GetValue("NoChangingWallPaper") == 1 || checkforcedwallpaper.GetValue("wallpaper") != null)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableWallpaperSettingsCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkwallpaper = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\ActiveDesktop");
                    RegistryKey checkforcedwallpaper = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int?)checkwallpaper.GetValue("NoChangingWallPaper") == 1 || checkforcedwallpaper.GetValue("wallpaper") != null)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableWallpaperSettingsCheckBox);
                    }
                }
                catch { }
            }



            //Colour check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkcolour = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int?)checkcolour.GetValue("NoDispAppearancePage") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableColourSettingsCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkcolour = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                    if ((int?)checkcolour.GetValue("NoDispAppearancePage") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableColourSettingsCheckBox);
                    }
                }
                catch { }
            }



            //Run check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkrun = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                    if ((int?)checkrun.GetValue("NoRun") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableRunCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkrun = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                    if ((int?)checkrun.GetValue("NoRun") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableRunCheckBox);
                    }
                }
                catch { }
            }



            //Windows key check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkwindowskey = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                    if ((int?)checkwindowskey.GetValue("NoWinKeys") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableWindowsKeyCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkwindowskey = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                    if ((int?)checkwindowskey.GetValue("NoWinKeys") == 1)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(reenableWindowsKeyCheckBox);
                    }
                }
                catch { }
            }



            //Exe icons check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkexeicons = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Classes\exefile\DefaultIcon");
                    if ((string)checkexeicons.GetValue("") != "%1")
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(resetExeIconsCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon");
                    if ((string)checkexeicons.GetValue("") != "%1")
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(resetExeIconsCheckBox);
                    }
                }
                catch { }
            }



            //Txt icons check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checktxticons = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Classes\txtfile\DefaultIcon");
                    if (checktxticons.GetValue("") != null && Convert.ToString(checktxticons.GetValue("")).ToLower() != @"%systemroot%\system32\imageres.dll,-102" && Convert.ToString(checktxticons.GetValue("")).ToLower() != @"c:\windows\system32\imageres.dll,-102")
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(resetTxtIconsCheckBox);
                    }
                }
                catch { fixList.Items.Remove(resetTxtIconsCheckBox); }
            }
            else
            {
                try
                {
                    RegistryKey checktxticons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon");
                    if (checktxticons.GetValue("") != null && Convert.ToString(checktxticons.GetValue("")).ToLower() != @"%systemroot%\system32\imageres.dll,-102" && Convert.ToString(checktxticons.GetValue("")).ToLower() != @"c:\windows\system32\imageres.dll,-102")
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(resetTxtIconsCheckBox);
                    }
                }
                catch { fixList.Items.Remove(resetTxtIconsCheckBox); }
            }



            //Shell key check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkshellkey = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows NT\CurrentVersion\Winlogon");
                    if ((string)checkshellkey.GetValue("Shell") != "explorer.exe")
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(resetShellKeyCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon");
                    if ((string)checkshellkey.GetValue("Shell") != "explorer.exe")
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(resetShellKeyCheckBox);
                    }
                }
                catch { }
            }



            //Userinit key check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkuserinitkey = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows NT\CurrentVersion\Winlogon");
                    if (Convert.ToString(checkuserinitkey.GetValue("Userinit")).ToLower() != @"c:\windows\system32\userinit.exe,")
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(resetUserinitKeyCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon");
                    if (Convert.ToString(checkuserinitkey.GetValue("Userinit")).ToLower() != @"c:\windows\system32\userinit.exe,")
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(resetUserinitKeyCheckBox);
                    }
                }
                catch { }
            }



            //Keyboard lock check
            if (separateDrive == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");

                    RegistryKey checkkeyboardlock = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout");
                    if (checkkeyboardlock.GetValue("Scancode Map") != null)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(removeKeyboardRestrictionsCheckBox);
                    }
                }
                catch { }
            }
            else
            {
                try
                {
                    RegistryKey checkkeyboardlock = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout");
                    if (checkkeyboardlock.GetValue("Scancode Map") != null)
                    {

                    }
                    else
                    {
                        fixList.Items.Remove(removeKeyboardRestrictionsCheckBox);
                    }
                }
                catch { }
            }



            //Add stuff to checkboxlist
            await Delay(5000); //time waster until i find a way to add an actual loading screen
            searchingForProblems.Visibility = Visibility.Collapsed;
            searchingForProblemsProgressBar.Visibility = Visibility.Collapsed;
            if (fixList.Items.Count == 0)
            {
                searchComplete.Visibility = Visibility.Visible;
                searchCompleteDescription.Visibility = Visibility.Visible;
                applyFix.Visibility = Visibility.Visible;
                fixList.Visibility = Visibility.Visible;
                goodToGo.Visibility = Visibility.Visible;
                applyFix.IsEnabled = false;
            }
            else
            {
                searchComplete.Visibility = Visibility.Visible;
                searchCompleteDescription.Visibility = Visibility.Visible;
                applyFix.Visibility = Visibility.Visible;
                fixList.Visibility = Visibility.Visible;
            }

        }*/
        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }

        /*private async void applyFix_Click(object sender, EventArgs e)
        {
            searchComplete.Visibility = Visibility.Collapsed;
            searchCompleteDescription.Visibility = Visibility.Collapsed;
            applyFix.Visibility = Visibility.Collapsed;
            fixList.Visibility = Visibility.Collapsed;
            attemptingRepairs.Visibility = Visibility.Visible;
            attemptingRepairsProgressBar.Visibility = Visibility.Visible;


            if (fixList.Items.Contains(reenableRegistryEditorCheckBox) && registryEditorDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Registry Editor";
                if (separateDriveFix == true)
                {
                    RegistryKey reenableregistry = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenableregistry.DeleteValue("DisableRegistryTools");
                        reenableregistry.Dispose();
                        registryEditorDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Registry Editor";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenableregistry = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenableregistry.DeleteValue("DisableRegistryTools");
                        reenableregistry.Dispose();
                        registryEditorDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Registry Editor";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(reenableTaskManagerCheckBox) && taskManagerDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Task Manager";
                if (separateDriveFix == true)
                {
                    RegistryKey reenabletaskmanager = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenabletaskmanager.DeleteValue("DisableTaskMgr");
                        reenabletaskmanager.Dispose();
                        taskManagerDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Task Manager";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenabletaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenabletaskmanager.DeleteValue("DisableTaskMgr");
                        reenabletaskmanager.Dispose();
                        taskManagerDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Task Manager";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(reenableCommandPromptCheckBox) && commandPromptDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Command Prompt";
                if (separateDriveFix == true)
                {
                    RegistryKey reenablecmd = Registry.LocalMachine.OpenSubKey(@"OfflineUser\Software\Policies\Microsoft\Windows\System", true);
                    try
                    {
                        reenablecmd.DeleteValue("DisableCMD");
                        reenablecmd.Dispose();
                        commandPromptDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Command Prompt";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenablecmd = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System", true);
                    try
                    {
                        reenablecmd.DeleteValue("DisableCMD");
                        reenablecmd.Dispose();
                        commandPromptDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Command Prompt";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(reenableUserAccountControlCheckBox) && uacDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling User Account Control";
                if (separateDriveFix == true)
                {
                    RegistryKey reenableuac = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenableuac.SetValue("EnableLUA", 1);
                        reenableuac.SetValue("ConsentPromptBehaviorUser", 1);
                        reenableuac.SetValue("ConsentPromptBehaviorAdmin", 5);
                        uacDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable User Account Control";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenableuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenableuac.SetValue("EnableLUA", 1);
                        reenableuac.SetValue("ConsentPromptBehaviorUser", 1);
                        reenableuac.SetValue("ConsentPromptBehaviorAdmin", 5);
                        uacDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable User Account Control";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(reenableThemeSettingsCheckBox) && themesDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Theme Settings";
                if (separateDriveFix == true)
                {
                    RegistryKey reenablethemesettings = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    try
                    {
                        reenablethemesettings.DeleteValue("NoThemesTab");
                        reenablethemesettings.Dispose();
                        themesDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Themes Settings";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenablethemesettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    try
                    {
                        reenablethemesettings.DeleteValue("NoThemesTab");
                        reenablethemesettings.Dispose();
                        themesDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Themes Settings";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(reenableWallpaperSettingsCheckBox) && wallpaperDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Wallpaper Settings";
                if (separateDriveFix == true)
                {
                    RegistryKey reenablewallpapersettings = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\ActiveDesktop", true);
                    RegistryKey disablesetwallpaperpolicy = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenablewallpapersettings.DeleteValue("NoChangingWallPaper");
                        reenablewallpapersettings.Dispose();
                        wallpaperDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Wallpaper Settings";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }

                    try
                    {
                        disablesetwallpaperpolicy.DeleteValue("wallpaper");
                        disablesetwallpaperpolicy.Dispose();
                    }
                    catch { }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenablewallpapersettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\ActiveDesktop", true);
                    RegistryKey disablesetwallpaperpolicy = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenablewallpapersettings.DeleteValue("NoChangingWallPaper");
                        reenablewallpapersettings.Dispose();
                        wallpaperDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Wallpaper Settings";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }

                    try
                    {
                        disablesetwallpaperpolicy.DeleteValue("wallpaper");
                        disablesetwallpaperpolicy.Dispose();
                    }
                    catch { }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(reenableColourSettingsCheckBox) && colourDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Colour Settings";
                if (separateDriveFix == true)
                {
                    RegistryKey reenablecoloursettings = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenablecoloursettings.DeleteValue("NoDispAppearancePage");
                        reenablecoloursettings.Dispose();
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Colour Settings";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenablecoloursettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenablecoloursettings.DeleteValue("NoDispAppearancePage");
                        reenablecoloursettings.Dispose();
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Colour Settings";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(reenableRunCheckBox) && runDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Run";
                if (separateDriveFix == true)
                {
                    RegistryKey reenablerun = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    try
                    {
                        reenablerun.DeleteValue("NoRun");
                    }
                    catch (Exception ex)
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Run" + ex;
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenablerun = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    try
                    {
                        reenablerun.DeleteValue("NoRun");
                    }
                    catch (Exception ex)
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Run" + ex;
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(reenableWindowsKeyCheckBox) && windowsKeyDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Windows key";
                if (separateDriveFix == true)
                {
                    RegistryKey reenablewinkeys = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    try
                    {
                        reenablewinkeys.DeleteValue("NoWinKeys");
                    }
                    catch (Exception ex)
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Windows key" + ex;
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey reenablewinkeys = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    try
                    {
                        reenablewinkeys.DeleteValue("NoWinKeys");
                    }
                    catch (Exception ex)
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRe-enable Windows key" + ex;
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(resetExeIconsCheckBox) && exeIconsDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Resetting .exe icons";
                if (separateDriveFix == true)
                {
                    RegistryKey resetexeicons = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Classes\exefile\DefaultIcon", true);
                    resetexeicons.SetValue("", "%1");
                    resetexeicons.Dispose();
                    await Delay(500);
                }
                else
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Resetting .exe icons requires the clearing of icon cache, which requires restarting explorer. Continue?";
                    dialog.PrimaryButtonText = "Yes";
                    dialog.SecondaryButtonText = "No";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    var result = await dialog.ShowAsync();
                    if (result == ContentDialogResult.Primary)
                    {
                        Process killexplorer = new Process();
                        killexplorer.StartInfo.FileName = "taskkill.exe";
                        killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                        killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        killexplorer.Start();
                        RegistryKey resetexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon", true);
                        resetexeicons.SetValue("", "%1");
                        resetexeicons.Dispose();
                        Process deletefiles = new Process();
                        deletefiles.StartInfo.FileName = "cmd.exe";
                        deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                        deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles.Start();
                        await Delay(1000);
                        Process restartexplorer = new Process();
                        restartexplorer.StartInfo.FileName = "cmd.exe";
                        restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                        restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        restartexplorer.Start();
                        exeIconsDone = true;
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(resetTxtIconsCheckBox) && TxtIconsDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Resetting .txt icons";
                if (separateDriveFix == true)
                {
                    RegistryKey resetlnkicons = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Classes\txtfile\DefaultIcon", true);
                    resetlnkicons.SetValue("", @"%systemroot%\system32\imageres.dll,-102");
                    resetlnkicons.Dispose();
                }
                else
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Resetting .txt icons requires the clearing of icon cache, which requires restarting explorer. Continue?";
                    dialog.PrimaryButtonText = "Yes";
                    dialog.SecondaryButtonText = "No";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    var result = await dialog.ShowAsync();
                    if (result == ContentDialogResult.Primary)
                    {
                        Process killexplorer = new Process();
                        killexplorer.StartInfo.FileName = "taskkill.exe";
                        killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                        killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        killexplorer.Start();
                        RegistryKey resetlnkicons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon", true);
                        resetlnkicons.SetValue("", @"%systemroot%\system32\imageres.dll,-102");
                        resetlnkicons.Dispose();
                        Process deletefiles = new Process();
                        deletefiles.StartInfo.FileName = "cmd.exe";
                        deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                        deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles.Start();
                        Process deletefiles2 = new Process();
                        deletefiles2.StartInfo.FileName = "cmd.exe";
                        deletefiles2.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\thumb*""";
                        deletefiles2.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles2.Start();
                        await Delay(1000);
                        Process restartexplorer = new Process();
                        restartexplorer.StartInfo.FileName = "cmd.exe";
                        restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                        restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        restartexplorer.Start();
                        exeIconsDone = true;
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(resetShellKeyCheckBox) && shellKeyDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Resetting Shell key";
                if (separateDriveFix == true)
                {
                    RegistryKey resetshellkey = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    try
                    {
                        resetshellkey.SetValue("Shell", "explorer.exe");
                        resetshellkey.Dispose();
                        shellKeyDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nReset Shell key";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey resetshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    try
                    {
                        resetshellkey.SetValue("Shell", "explorer.exe");
                        resetshellkey.Dispose();
                        shellKeyDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nReset Shell key";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(resetUserinitKeyCheckBox) && userinitKeyDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Resetting Userinit key";
                if (separateDriveFix == true)
                {
                    RegistryKey resetuserinitkey = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    try
                    {
                        resetuserinitkey.SetValue("Userinit", @"c:\windows\system32\userinit.exe,");
                        resetuserinitkey.Dispose();
                        userinitKeyDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nReset Userinit key";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
                else
                {
                    RegistryKey resetuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    try
                    {
                        resetuserinitkey.SetValue("Userinit", @"c:\windows\system32\userinit.exe,");
                        resetuserinitkey.Dispose();
                        userinitKeyDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nReset Userinit key";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
            }
            if (fixList.Items.Contains(removeKeyboardRestrictionsCheckBox) && removeKeyboardRestrictionsDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Remove Keyboard Restrictions";
                if (separateDriveFix == true)
                {
                    try
                    {
                        RegistryKey removekeyboardrestrictions = Registry.LocalMachine.OpenSubKey(@"OfflineSystem\CurrentControlSet\Control\Keyboard Layout", true);
                        removekeyboardrestrictions.DeleteValue("Scancode Map");
                        removeKeyboardRestrictionsDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRemove keyboard restrictions";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
                else
                {
                    try
                    {
                        RegistryKey removekeyboardrestrictions = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout", true);
                        removekeyboardrestrictions.DeleteValue("Scancode Map");
                        removeKeyboardRestrictionsDone = true;
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error performing the requested operation: \nRemove keyboard restrictions";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                        this.Close();
                    }
                    await Delay(500);
                }
            }

            Process unloadHiveUser = new Process();
            unloadHiveUser.StartInfo.FileName = "reg.exe";
            unloadHiveUser.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
            unloadHiveUser.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            unloadHiveUser.Start();

            Process unloadHiveSoftware = new Process();
            unloadHiveSoftware.StartInfo.FileName = "reg.exe";
            unloadHiveSoftware.StartInfo.Arguments = @"unload ""HKLM\OfflineSoftware""";
            unloadHiveSoftware.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            unloadHiveSoftware.Start();

            Process unloadHiveSystem = new Process();
            unloadHiveSystem.StartInfo.FileName = "reg.exe";
            unloadHiveSystem.StartInfo.Arguments = @"unload ""HKLM\OfflineSystem""";
            unloadHiveSystem.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            unloadHiveSystem.Start();
            attemptingRepairs.Visibility = Visibility.Collapsed;
            attemptingRepairsProgressBar.Visibility = Visibility.Collapsed;
            repairSuccessful.Visibility = Visibility.Visible;
            repairSuccessfulCloseButton.Visibility = Visibility.Visible;
            if (removeKeyboardRestrictionsDone == true && separateDriveFix == false)
            {
                ContentDialog dialog = new ContentDialog();
                dialog.Title = "Information";
                dialog.Content = "A fix that requires a restart has been successfully applied. You will need to restart to see the changes take effect. Restart now?";
                dialog.PrimaryButtonText = "Yes";
                dialog.SecondaryButtonText = "No";
                dialog.DefaultButton = ContentDialogButton.Primary;
                var result = await dialog.ShowAsync();
                if (result == ContentDialogResult.Primary)
                {
                    Process restartcomputer = new Process();
                    restartcomputer.StartInfo.FileName = "shutdown.exe";
                    restartcomputer.StartInfo.Arguments = "-r -t 0";
                    restartcomputer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    restartcomputer.Start();
                }
            }
        }*/

        private void repairSuccessfulCloseButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}
