using Microsoft.Win32;
using ModernWpf.Controls;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Windows_Malware_Effects_Remediation_Tool
{
    /// <summary>
    /// Interaction logic for AutomaticRepair.xaml
    /// </summary>
    public partial class AutomaticRepair : Window
    {
        public AutomaticRepair()
        {
            InitializeComponent();
            if (Convert.ToInt32(Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool").GetValue("TopMost")) == 1)
                this.Topmost = true;
            Main2();
        }


        public static bool registryEditorDone = false;
        public static bool taskManagerDone = false;
        public static bool commandPromptDone = false;
        public static bool uacDone = false;

        public static bool themesDone = false;
        public static bool wallpaperDone = false;
        public static bool colourDone = false;
        public static bool runDone = false;
        public static bool windowsKeyDone = false;

        public static bool exeIconsDone = false;
        public static bool TxtIconsDone = false;
        public static bool shellKeyDone = false;
        public static bool userinitKeyDone = false;
        public static bool removeKeyboardRestrictionsDone = false;


        private async void Main2()
        {
            List<string> list = new List<string>();
            //Registry Editor Check
            try
            {
                RegistryKey checkregistryeditor = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int?)checkregistryeditor.GetValue("DisableRegistryTools") == 1)
                {
                    
                } else
                {
                    fixList.Items.Remove(reenableRegistryEditorCheckBox);
                }
            }
            catch { }



            //Task Manager Check 
            try
            {
                RegistryKey checktaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int?)checktaskmanager.GetValue("DisableTaskMgr") == 1)
                {

                } else
                {
                    fixList.Items.Remove(reenableTaskManagerCheckBox);
                }
            }
            catch { }


            //Command Prompt Check
            try
            {
                RegistryKey checkcmd = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System");
                if ((int?)checkcmd.GetValue("DisableCMD") != 0)
                {
                    
                } else
                {
                    fixList.Items.Remove(reenableCommandPromptCheckBox);
                }
            }
            catch { }



            //User Account Control Check
            try
            {
                RegistryKey checkuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int)checkuac.GetValue("EnableLUA") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorUser") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorAdmin") == 0)
                {

                } else
                {
                    fixList.Items.Remove(reenableUserAccountControlCheckBox);
                }
            }
            catch { }



            //Themes check
            try
            {
                RegistryKey checkthemes = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                if((int?)checkthemes.GetValue("NoThemesTab") == 1)
                {

                } else
                {
                    fixList.Items.Remove(reenableThemeSettingsCheckBox);
                }
            } catch { }



            //Wallpaper check
            try
            {
                RegistryKey checkwallpaper = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\ActiveDesktop");
                RegistryKey checkforcedwallpaper = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int?)checkwallpaper.GetValue("NoChangingWallPaper") == 1 || checkforcedwallpaper.GetValue("wallpaper") != null)
                {

                }
                else
                {
                    fixList.Items.Remove(reenableWallpaperSettingsCheckBox);
                }
            }
            catch { }



            //Colour check
            try
            {
                RegistryKey checkcolour = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int?)checkcolour.GetValue("NoDispAppearancePage") == 1)
                {

                }
                else
                {
                    fixList.Items.Remove(reenableColourSettingsCheckBox);
                }
            }
            catch { }



            //Run check
            try
            {
                RegistryKey checkrun = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                if ((int?)checkrun.GetValue("NoRun") == 1)
                {

                }
                else
                {
                    fixList.Items.Remove(reenableRunCheckBox);
                }
            }
            catch { }



            //Windows key check
            try
            {
                RegistryKey checkwindowskey = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer");
                if ((int?)checkwindowskey.GetValue("NoWinKeys") == 1)
                {

                }
                else
                {
                    fixList.Items.Remove(reenableWindowsKeyCheckBox);
                }
            }
            catch { }



            //Exe icons check
            try
            {
                RegistryKey checkexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon");
                if ((string)checkexeicons.GetValue("") != "%1")
                {

                } else
                {
                    fixList.Items.Remove(resetExeIconsCheckBox);
                }
            }
            catch { }



            //Txt icons check
            try
            {
                RegistryKey checktxticons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon");
                if (checktxticons.GetValue("") != null && Convert.ToString(checktxticons.GetValue("")).ToLower() != @"%systemroot%\system32\imageres.dll,-102" && Convert.ToString(checktxticons.GetValue("")).ToLower() != @"c:\windows\system32\imageres.dll,-102")
                {
                    
                } else
                {
                    fixList.Items.Remove(resetTxtIconsCheckBox);
                }
            }
            catch { }



            //Shell key check
            try
            {
                RegistryKey checkshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon");
                if ((string)checkshellkey.GetValue("Shell") != "explorer.exe")
                {
                    
                } else
                {
                    fixList.Items.Remove(resetShellKeyCheckBox);
                }
            }
            catch { }



            //Userinit key check
            try
            {
                RegistryKey checkuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon");
                if (Convert.ToString(checkuserinitkey.GetValue("Userinit")).ToLower() != @"c:\windows\system32\userinit.exe,")
                {
                    
                } else
                {
                    fixList.Items.Remove(resetUserinitKeyCheckBox);
                }
            }
            catch { }



            //Keyboard lock check
            try
            {
                RegistryKey checkkeyboardlock = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout");
                if (checkkeyboardlock.GetValue("Scancode Map") != null)
                {
                    
                } else
                {
                    fixList.Items.Remove(removeKeyboardRestrictionsCheckBox);
                }
            }
            catch { }



            //Add stuff to checkboxlist
            await Delay(5000); //time waster until i find a way to add an actual loading screen
            searchingForProblems.Visibility = Visibility.Collapsed;
            searchingForProblemsProgressBar.Visibility = Visibility.Collapsed;
            if (fixList.Items.Count == 0)
            {
                searchComplete.Visibility = Visibility.Visible;
                searchCompleteDescription.Visibility = Visibility.Visible;
                applyFix.Visibility = Visibility.Visible;
                fixList.Visibility = Visibility.Visible;
                goodToGo.Visibility = Visibility.Visible;
                applyFix.IsEnabled = false;
            }
            else
            {
                searchComplete.Visibility = Visibility.Visible;
                searchCompleteDescription.Visibility = Visibility.Visible;
                applyFix.Visibility = Visibility.Visible;
                fixList.Visibility = Visibility.Visible;
            }
            
        }
        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }

        private async void applyFix_Click(object sender, EventArgs e)
        {
            searchComplete.Visibility = Visibility.Collapsed;
            searchCompleteDescription.Visibility = Visibility.Collapsed;
            applyFix.Visibility = Visibility.Collapsed;
            fixList.Visibility = Visibility.Collapsed;
            attemptingRepairs.Visibility = Visibility.Visible;
            attemptingRepairsProgressBar.Visibility = Visibility.Visible;


            if (fixList.Items.Contains(reenableRegistryEditorCheckBox) && registryEditorDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Registry Editor";
                RegistryKey reenableregistry = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                try
                {
                    reenableregistry.DeleteValue("DisableRegistryTools");
                    reenableregistry.Dispose();
                    registryEditorDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable Registry Editor";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                    this.Close();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(reenableTaskManagerCheckBox) && taskManagerDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Task Manager";
                RegistryKey reenabletaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                try
                {
                    reenabletaskmanager.DeleteValue("DisableTaskMgr");
                    reenabletaskmanager.Dispose();
                    taskManagerDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable Task Manager";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                    this.Close();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(reenableCommandPromptCheckBox) && commandPromptDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Command Prompt";
                RegistryKey reenablecmd = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System", true);
                try
                {
                    reenablecmd.DeleteValue("DisableCMD");
                    reenablecmd.Dispose();
                    commandPromptDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable Command Prompt";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                    this.Close();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(reenableUserAccountControlCheckBox) && uacDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling User Account Control";
                RegistryKey reenableuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                try
                {
                    reenableuac.SetValue("EnableLUA", 1);
                    reenableuac.SetValue("ConsentPromptBehaviorUser", 1);
                    reenableuac.SetValue("ConsentPromptBehaviorAdmin", 5);
                    uacDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable User Account Control";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                    this.Close();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(reenableThemeSettingsCheckBox) && themesDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Theme Settings";
                RegistryKey reenablethemesettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                try
                {
                    reenablethemesettings.DeleteValue("NoThemesTab");
                    reenablethemesettings.Dispose();
                    themesDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable Themes Settings";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(reenableWallpaperSettingsCheckBox) && wallpaperDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Wallpaper Settings";
                RegistryKey reenablewallpapersettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\ActiveDesktop", true);
                RegistryKey disablesetwallpaperpolicy = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                try
                {
                    reenablewallpapersettings.DeleteValue("NoChangingWallPaper");
                    reenablewallpapersettings.Dispose();
                    wallpaperDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable Wallpaper Settings";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }

                try
                {
                    disablesetwallpaperpolicy.DeleteValue("wallpaper");
                    disablesetwallpaperpolicy.Dispose();
                }
                catch { }
                await Delay(500);
            }
            if (fixList.Items.Contains(reenableColourSettingsCheckBox) && colourDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Colour Settings";
                RegistryKey reenablecoloursettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                try
                {
                    reenablecoloursettings.DeleteValue("NoDispAppearancePage");
                    reenablecoloursettings.Dispose();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable Colour Settings";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(reenableRunCheckBox) && runDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Run";
                RegistryKey reenablerun = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                try
                {
                    reenablerun.DeleteValue("NoRun");
                }
                catch (Exception ex)
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable Run" + ex;
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(reenableWindowsKeyCheckBox) && windowsKeyDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Re-enabling Windows key";
                RegistryKey reenablewinkeys = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                try
                {
                    reenablewinkeys.DeleteValue("NoWinKeys");
                }
                catch (Exception ex)
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRe-enable Windows key" + ex;
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(resetExeIconsCheckBox) && exeIconsDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Resetting .exe icons";
                ContentDialog dialog = new ContentDialog();
                dialog.Title = "Information";
                dialog.Content = "Resetting .exe icons requires the clearing of icon cache, which requires restarting explorer. Continue?";
                dialog.PrimaryButtonText = "Yes";
                dialog.SecondaryButtonText = "No";
                dialog.DefaultButton = ContentDialogButton.Primary;
                var result = await dialog.ShowAsync();
                if (result == ContentDialogResult.Primary)
                {
                    Process killexplorer = new Process();
                    killexplorer.StartInfo.FileName = "taskkill.exe";
                    killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                    killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    killexplorer.Start();
                    RegistryKey resetexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon", true);
                    resetexeicons.SetValue("", "%1");
                    resetexeicons.Dispose();
                    Process deletefiles = new Process();
                    deletefiles.StartInfo.FileName = "cmd.exe";
                    deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                    deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    deletefiles.Start();
                    await Delay(1000);
                    Process restartexplorer = new Process();
                    restartexplorer.StartInfo.FileName = "cmd.exe";
                    restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                    restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    restartexplorer.Start();
                    exeIconsDone = true;
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(resetTxtIconsCheckBox) && TxtIconsDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Resetting .txt icons";
                ContentDialog dialog = new ContentDialog();
                dialog.Title = "Information";
                dialog.Content = "Resetting .txt icons requires the clearing of icon cache, which requires restarting explorer. Continue?";
                dialog.PrimaryButtonText = "Yes";
                dialog.SecondaryButtonText = "No";
                dialog.DefaultButton = ContentDialogButton.Primary;
                var result = await dialog.ShowAsync();
                if (result == ContentDialogResult.Primary)
                {
                    Process killexplorer = new Process();
                    killexplorer.StartInfo.FileName = "taskkill.exe";
                    killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                    killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    killexplorer.Start();
                    RegistryKey resetlnkicons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon", true);
                    resetlnkicons.SetValue("", @"%systemroot%\system32\imageres.dll,-102");
                    resetlnkicons.Dispose();
                    Process deletefiles = new Process();
                    deletefiles.StartInfo.FileName = "cmd.exe";
                    deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                    deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    deletefiles.Start();
                    Process deletefiles2 = new Process();
                    deletefiles2.StartInfo.FileName = "cmd.exe";
                    deletefiles2.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\thumb*""";
                    deletefiles2.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    deletefiles2.Start();
                    await Delay(1000);
                    Process restartexplorer = new Process();
                    restartexplorer.StartInfo.FileName = "cmd.exe";
                    restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                    restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    restartexplorer.Start();
                    exeIconsDone = true;
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(resetShellKeyCheckBox) && shellKeyDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Resetting Shell key";
                RegistryKey resetshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                try
                {
                    resetshellkey.SetValue("Shell", "explorer.exe");
                    resetshellkey.Dispose();
                    shellKeyDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nReset Shell key";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                    this.Close();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(resetUserinitKeyCheckBox) && userinitKeyDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Resetting Userinit key";
                RegistryKey resetuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                try
                {
                    resetuserinitkey.SetValue("Userinit", @"c:\windows\system32\userinit.exe,");
                    resetuserinitkey.Dispose();
                    userinitKeyDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nReset Userinit key";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                    this.Close();
                }
                await Delay(500);
            }
            if (fixList.Items.Contains(removeKeyboardRestrictionsCheckBox) && removeKeyboardRestrictionsDone == false)
            {
                attemptingRepairs.Content = "Attempting Repairs: Remove Keyboard Restrictions";
                try
                {
                    RegistryKey removekeyboardrestrictions = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout", true);
                    removekeyboardrestrictions.DeleteValue("Scancode Map");
                    removeKeyboardRestrictionsDone = true;
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error performing the requested operation: \nRemove keyboard restrictions";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                    this.Close();
                }
                await Delay(500);
            }
            
            attemptingRepairs.Visibility = Visibility.Collapsed;
            attemptingRepairsProgressBar.Visibility = Visibility.Collapsed;
            repairSuccessful.Visibility = Visibility.Visible;
            repairSuccessfulCloseButton.Visibility = Visibility.Visible;
            if (removeKeyboardRestrictionsDone == true)
            {
                ContentDialog dialog = new ContentDialog();
                dialog.Title = "Information";
                dialog.Content = "A fix that requires a restart has been successfully applied. You will need to restart to see the changes take effect. Restart now?";
                dialog.PrimaryButtonText = "Yes";
                dialog.SecondaryButtonText = "No";
                dialog.DefaultButton = ContentDialogButton.Primary;
                var result = await dialog.ShowAsync();
                if (result == ContentDialogResult.Primary)
                {
                    Process restartcomputer = new Process();
                    restartcomputer.StartInfo.FileName = "shutdown.exe";
                    restartcomputer.StartInfo.Arguments = "-r -t 0";
                    restartcomputer.Start();
                }
            }
        }

        private void repairSuccessfulCloseButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}
