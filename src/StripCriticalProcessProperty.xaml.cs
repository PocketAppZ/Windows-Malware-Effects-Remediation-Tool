using Microsoft.Win32;
using ModernWpf.Controls;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace Windows_Malware_Effects_Remediation_Tool
{
    /// <summary>
    /// Interaction logic for StripCriticalProcessProperty.xaml
    /// </summary>

    public partial class StripCriticalProcessProperty : Window
    {
        /**
         * {
         *      1234: ProcessInfo("csrss.exe", 1234, "SYSTEM", true)
         *      5678: ProcessInfo("msedge.exe", 5678, "Administrator", false)
         * }
        **/

        public static Dictionary<int, ProcessInfo> ProcessList = new Dictionary<int, ProcessInfo>();

        public class ProcessInfo
        {
            public string Name { get; }
            public int ID { get; }
            public string Username { get; }
            public bool isSelected { get; set; } = true;
            public bool isCritical { get; } = false;

            public ProcessInfo(string name, int id, string username, bool critical)
            {
                Name = name;
                ID = id;
                Username = username;
                isCritical = critical;
            }
        }

        private LoadingPage loadingPage = new LoadingPage();

        public StripCriticalProcessProperty()
        {
            InitializeComponent();
            if (Convert.ToInt32(Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool").GetValue("TopMost")) == 1)
                this.Topmost = true;

            frame.Content = loadingPage;

            Task.Run(() => Main2());
        }

        private async void Main2()
        {
            // Exclusions
            string[] extensionlessProcesses =
            {
                "System",
                "System Idle Process",
                "Secure System",
                "Registry"
            };

            string[] systemUsers =
            {
                "SYSTEM",
                "LOCAL SERVICE",
                "NETWORK SERVICE",
                "UMFD",
                "DWM"
            };

            string[] excludedPaths =
            {
                $@"{Environment.GetFolderPath(Environment.SpecialFolder.Windows)}\system32\winlogon.exe".ToLower(),
                $@"{Environment.GetFolderPath(Environment.SpecialFolder.Windows)}\system32\dashost.exe".ToLower(),
                $@"{Environment.GetFolderPath(Environment.SpecialFolder.Windows)}\system32\wbem\wmiprvse.exe".ToLower(),
                $@"{Environment.GetFolderPath(Environment.SpecialFolder.Windows)}\system32\dwm.exe".ToLower(),
                $@"{Environment.GetFolderPath(Environment.SpecialFolder.Windows)}\system32\fontdrvhost.exe".ToLower(),
                $@"{Environment.GetFolderPath(Environment.SpecialFolder.Windows)}\explorer.exe".ToLower()
            };

            // Process Check
            ManagementObjectSearcher Processes = new ManagementObjectSearcher("SELECT * FROM Win32_Process");
            int i = 0;
            int numberOfProcesses = Processes.Get().Count;
            foreach (ManagementObject process in Processes.Get())
            {
                i += 1;
                Application.Current.Dispatcher.Invoke(() => loadingPage.progressText.Content = $"Processed {i} of {numberOfProcesses} processes");

                // Initialise process variables
                string processName = process["Name"].ToString();
                int processID = Convert.ToInt32(process["ProcessId"]);
                string processPath = process["ExecutablePath"]?.ToString() ?? "";

                // Highly protected kernel mode processes will NOT return a path, assume they're clean (not that we can terminate them in user mode anyway)
                if (processPath == "") continue;

                // Get process owner
                string owner = "";
                try
                {
                    string[] OwnerInfo = new string[2];
                    process.InvokeMethod("GetOwner", OwnerInfo);
                    owner = OwnerInfo[0];
                }
                catch
                {
                    owner = "Unknown";
                }

                // Skip "System", "System Idle Process" and other extensionless processes
                if (extensionlessProcesses.Contains(processName)) continue;

                // Skip current process
                if (processID == Process.GetCurrentProcess().Id) continue;

                // Skip whitelisted processes
                if (excludedPaths.Contains(processPath.ToLower())) continue;

                // If the process is not signed by Microsoft or executing user is not SYSTEM, LOCAL SERVICE or NETWORK SERVICE AND not signed by Microsoft, add it to the list
                bool register = false;
                if (systemUsers.Contains(owner))
                {
                    try
                    {
                        X509Certificate2 signerCert;
                        signerCert = new X509Certificate2(X509Certificate.CreateFromSignedFile(processPath));
                        if (!signerCert.SubjectName.Name.Contains("Microsoft"))
                        {
                            register = true;
                        }
                    } catch
                    {
                        register = true;
                    }
                }
                else
                {
                    register = true;
                }

                // Register registered apps to the list
                if (register == true)
                {
                    // Check if process is critical
                    int isCritical = 2;
                    Process.EnterDebugMode();
                    try
                    {
                        NtQueryInformationProcess(Process.GetProcessById(processID).Handle, 0x1D, ref isCritical, sizeof(int));
                    }
                    catch (ArgumentException ex)
                    {
                        continue;
                    }
                    /*bool passIsCritical = false;
                    
                    if (isCritical == 1)
                    {
                        passIsCritical = true;
                    } else
                    {
                        passIsCritical = false;
                    }*/

                    ProcessInfo processInfo = new ProcessInfo(processName, processID, owner, false);
                    ProcessList.Add(processID, processInfo);

                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        CheckBox checkBox = new CheckBox();
                        checkBox.IsChecked = true;
                        checkBox.Checked += (sender, e) =>
                        {

                        };
                        checkBox.Unchecked += (sender, e) =>
                        {

                        };

                        killList.Items.Add(processInfo);
                    });
                }
            }
            Application.Current.Dispatcher.Invoke(() => frame.Visibility = Visibility.Collapsed);
            Application.Current.Dispatcher.Invoke(() => killList.Items.SortDescriptions.Add(new System.ComponentModel.SortDescription("Name", System.ComponentModel.ListSortDirection.Ascending)));
        }


        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern int NtSetInformationProcess(IntPtr hProcess, int processInformationClass, ref int processInformation, int processInformationLength);

        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern int NtQueryInformationProcess(IntPtr hProcess, int processInformationClass, ref int processInformation, int processInformationLength);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern IntPtr OpenProcess(int dwDesiredAccess, bool willInheritHandle, int dwProcessId);

        [DllImport("psapi.dll", SetLastError = true)]
        private static extern int GetModuleFileNameEx(IntPtr hProcess, IntPtr hModule, [Out] StringBuilder fileLocation, int nSize);


        private void criticalProcessSubmit_Click(object sender, EventArgs e)
        {
            try
            {
                var process = int.Parse(textBox1.Text);
                int isCritical = 0;
                int BreakOnTermination = 0x1D;
                Process.EnterDebugMode();
                NtSetInformationProcess(Process.GetProcessById(process).Handle, BreakOnTermination, ref isCritical, sizeof(int));
                if (checkBox1.IsChecked == true)
                {
                    Process.GetProcessById(process).Kill();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Successfully stripped the critical process property and terminated the process \"" + Process.GetProcessById(process).ProcessName + ".exe\"";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    dialog.ShowAsync();
                }
                else
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Successfully stripped the critical process property of process \"" + Process.GetProcessById(process).ProcessName + ".exe\"";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    dialog.ShowAsync();
                }
            }
            catch
            {
                ContentDialog dialog = new ContentDialog();
                dialog.Title = "Error";
                dialog.Content = "Error applying the requested operation(s). Check that the process ID you entered is valid or if I have sufficient permissions.";
                dialog.PrimaryButtonText = "OK";
                dialog.DefaultButton = ContentDialogButton.Primary;
                dialog.ShowAsync();
            }

        }


        private void NumberValidationTextBox(object sender, TextCompositionEventArgs e)
        {
            Regex regex = new Regex("[^0-9]+");
            e.Handled = regex.IsMatch(e.Text);
        }

        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }
    }
}
