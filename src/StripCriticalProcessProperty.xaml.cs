using Microsoft.Win32;
using ModernWpf.Controls;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Management;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace Windows_Malware_Effects_Remediation_Tool
{
    /// <summary>
    /// Interaction logic for StripCriticalProcessProperty.xaml
    /// </summary>

    public partial class StripCriticalProcessProperty : Window
    {
        /**
         * {
         *      1234: ProcessInfo("Process1", 1234, true)
         *      5678: ProcessInfo("Process2", 5678, false)
         * }
        **/

        public static Dictionary<int, ProcessInfo> ProcessList = new Dictionary<int, ProcessInfo>();

        public class ProcessInfo
        {
            public string Name { get; set; }
            public int ID { get; set; }
            public string Username { get; set; }
            public bool isSelected { get; set; } = true;

            public ProcessInfo(string name, int id, string username)
            {
                Name = name;
                ID = id;
                Username = username;
            }
        }

        public StripCriticalProcessProperty()
        {
            InitializeComponent();
            if (Convert.ToInt32(Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool").GetValue("TopMost")) == 1)
                this.Topmost = true;

            LoadingPage loadingPage = new LoadingPage();
            frame.Content = loadingPage;

            /*Loaded += async (sender, e) =>
            {
                await Dispatcher.BeginInvoke(new Action(Main2));
            };*/

            Task.Run(() => Main2());
        }

        private async void Main2()
        {
            // Process Check
            ManagementObjectSearcher Processes = new ManagementObjectSearcher("SELECT * FROM Win32_Process");
            foreach (ManagementObject process in Processes.Get())
            {
                string processName = process["Name"].ToString();
                int processID = Convert.ToInt32(process["ProcessId"]);

                // Get process owner
                string[] OwnerInfo = new string[2];
                process.InvokeMethod("GetOwner", OwnerInfo);
                var owner = OwnerInfo[0];

                // Skip "System" and "System Idle Process" processes
                if (processName == "System" || processName == "System Idle Process")
                {
                    continue;
                }

                // If the process is not signed by Microsoft or executing user is not SYSTEM, LOCAL SERVICE or NETWORK SERVICE AND not signed by Microsoft, add it to the list
                bool register = false;
                if (owner == "SYSTEM" || owner == "LOCAL SERVICE" || owner == "NETWORK SERVICE" || owner == "UMFD-0" || owner == "UMFD-1" || owner == "DWM-1")
                {
                    try
                    {
                        X509Certificate2 signerCert;
                        signerCert = new X509Certificate2(X509Certificate.CreateFromSignedFile(process["ExecutablePath"].ToString()));
                        if (!signerCert.SubjectName.Name.Contains("Microsoft"))
                        {
                            register = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (ex.Message.Contains("Object reference not set to an instance of an object.") || ex.Message.Contains("Cannot find the requested object."))
                        {
                            MessageBox.Show(processName);
                            MessageBox.Show(ex.Message);
                        }
                        else
                        {
                            register = true;
                        }
                    }
                }
                else
                {
                    register = true;
                }

                if (register == true)
                {
                    ProcessInfo processInfo = new ProcessInfo(processName, processID, owner);
                    ProcessList.Add(processID, processInfo);

                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        CheckBox checkBox = new CheckBox();
                        checkBox.IsChecked = true;
                        checkBox.Checked += (sender, e) =>
                        {

                        };
                        checkBox.Unchecked += (sender, e) =>
                        {

                        };

                        killList.Items.Add(processInfo);
                    });
                }
                Application.Current.Dispatcher.Invoke(() => frame.Visibility = Visibility.Collapsed);
            }
        }


        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern int NtSetInformationProcess(IntPtr hProcess, int processInformationClass, ref int processInformation, int processInformationLength);

        private void criticalProcessSubmit_Click(object sender, EventArgs e)
        {
            try
            {
                var process = int.Parse(textBox1.Text);
                int isCritical = 0;
                int BreakOnTermination = 0x1D;
                Process.EnterDebugMode();
                NtSetInformationProcess(Process.GetProcessById(process).Handle, BreakOnTermination, ref isCritical, sizeof(int));
                if (checkBox1.IsChecked == true)
                {
                    Process.GetProcessById(process).Kill();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Successfully stripped the critical process property and terminated the process \"" + Process.GetProcessById(process).ProcessName + ".exe\"";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    dialog.ShowAsync();
                }
                else
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Successfully stripped the critical process property of process \"" + Process.GetProcessById(process).ProcessName + ".exe\"";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    dialog.ShowAsync();
                }
            }
            catch
            {
                ContentDialog dialog = new ContentDialog();
                dialog.Title = "Error";
                dialog.Content = "Error applying the requested operation(s). Check that the process ID you entered is valid or if I have sufficient permissions.";
                dialog.PrimaryButtonText = "OK";
                dialog.DefaultButton = ContentDialogButton.Primary;
                dialog.ShowAsync();
            }

        }


        private void NumberValidationTextBox(object sender, TextCompositionEventArgs e)
        {
            Regex regex = new Regex("[^0-9]+");
            e.Handled = regex.IsMatch(e.Text);
        }

        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }
    }
}
