using System;
using System.Windows;
using System.IO;
using System.Diagnostics;
using Microsoft.Win32;
using System.Threading.Tasks;
using System.Security.Permissions;
using System.Security.Principal;
using System.Reflection;
using ModernWpf;
using ModernWpf.Controls;
using System.Windows.Input;
using System.Net;

namespace Windows_Malware_Effects_Remediation_Tool
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            WindowsPrincipal pricipal = new WindowsPrincipal(WindowsIdentity.GetCurrent());
            bool hasAdministrativeRight = pricipal.IsInRole(WindowsBuiltInRole.Administrator);
            if (!hasAdministrativeRight)
            {
                this.Hide();
                string fileName = Assembly.GetExecutingAssembly().Location;
                ProcessStartInfo processInfo = new ProcessStartInfo();
                processInfo.Verb = "runas";
                processInfo.FileName = fileName;

                try
                {
                    Process.Start(processInfo);
                    Environment.Exit(0);
                }
                catch
                {
                    MessageBox.Show("The Windows Malware Effects Remediation Tool requires administrative privileges to continue.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    Environment.Exit(0);
                }

            } else
            {
                InitializeComponent();
                RegistryKey checkdarklightmode = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool");
                if (checkdarklightmode.GetValue("DarkMode") == null)
                {
                    systemSettingMenuItem.IsChecked = true;
                    lightDarkButton.IsEnabled = false;
                }
                else
                if ((int)checkdarklightmode.GetValue("DarkMode") == 1)
                {
                    ThemeManager.Current.ApplicationTheme = ApplicationTheme.Dark;
                }
                else if ((int)checkdarklightmode.GetValue("DarkMode") == 0)
                {
                    ThemeManager.Current.ApplicationTheme = ApplicationTheme.Light;
                }
            }
        }
        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }

        private void aboutButton_Click(object sender, RoutedEventArgs e)
        {
            
            AboutWindow aboutWindow = new AboutWindow();
            aboutWindow.ShowDialog();
            
        }

        private void launchAutomaticRepair_Click(object sender, RoutedEventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                AutomaticRepair automaticrepair = new AutomaticRepair(true);
                automaticrepair.ShowDialog();
            }
            else
            {
                AutomaticRepair automaticrepair = new AutomaticRepair(false);
                automaticrepair.ShowDialog();
            }
        }

        private async void reenableRegistry_Click(object sender, EventArgs e)
        {

            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    await Delay(500);

                    RegistryKey reenableregistry = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    reenableregistry.DeleteValue("DisableRegistryTools");
                    reenableregistry.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Registry Editor has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the Registry Editor. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                try
                {
                    RegistryKey reenableregistry = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    reenableregistry.DeleteValue("DisableRegistryTools");
                    reenableregistry.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Registry Editor has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the Registry Editor. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private async void reenableTaskManager_Click(object sender, EventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    RegistryKey reenabletaskmanager = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);

                    await Delay(500);
                    reenabletaskmanager.DeleteValue("DisableTaskMgr");
                    reenabletaskmanager.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Task Manager has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the Task Manager. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            } else
            {
                try
                {
                    RegistryKey reenabletaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    reenabletaskmanager.DeleteValue("DisableTaskMgr");
                    reenabletaskmanager.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Task Manager has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the Task Manager. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private async void reenableCommandPrompt_Click(object sender, EventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    RegistryKey reenablecmd = Registry.LocalMachine.OpenSubKey(@"OfflineUser\SOFTWARE\Policies\Microsoft\Windows\System", true);

                    await Delay(500);
                    try
                    {
                        reenablecmd.DeleteValue("DisableCMD");
                        reenablecmd.Dispose();
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Information";
                        dialog.Content = "The Command Prompt has been re-enabled successfully.";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error re-enabling the Command Prompt. Was it even disabled in the first place? Do I have sufficient permissions?";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the Command Prompt. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                try
                {
                    RegistryKey reenablecmd = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System", true);
                    reenablecmd.DeleteValue("DisableCMD");
                    reenablecmd.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Command Prompt has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the Command Prompt. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private void stripCriticalProcess_Click(object sender, EventArgs e)
        {
            StripCriticalProcessProperty stripCriticalProcessProperty = new StripCriticalProcessProperty();
            stripCriticalProcessProperty.ShowDialog();
        }

        private async void resetExeIcons_Click(object sender, EventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineSoftware"" """ + mountPoint + @"\Windows\System32\config\SOFTWARE" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();

                    await Delay(500);
                    RegistryKey resetexeicons = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Classes\exefile\DefaultIcon", true);
                    resetexeicons.SetValue("", "%1");
                    resetexeicons.Dispose();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error resetting the .exe icons. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineSoftware""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                try
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Resetting .exe icons requires the clearing of icon cache, which requires restarting explorer. Continue?";
                    dialog.PrimaryButtonText = "Yes";
                    dialog.SecondaryButtonText = "No";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    var result = await dialog.ShowAsync();
                    if (result == ContentDialogResult.Primary)
                    {
                        Process killexplorer = new Process();
                        killexplorer.StartInfo.FileName = "taskkill.exe";
                        killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                        killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        killexplorer.Start();
                        RegistryKey resetexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon", true);
                        resetexeicons.SetValue("", "%1");
                        resetexeicons.Dispose();
                        Process deletefiles = new Process();
                        deletefiles.StartInfo.FileName = "cmd.exe";
                        deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                        deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles.Start();
                        await Delay(1000);
                        Process restartexplorer = new Process();
                        restartexplorer.StartInfo.FileName = "cmd.exe";
                        restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                        restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        restartexplorer.Start();
                    }
                } catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error resetting the .exe icons. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private async void resetTxtIcons_Click(object sender, EventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineSoftware"" """ + mountPoint + @"\Windows\System32\config\SOFTWARE" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    
                    await Delay(500);
                    RegistryKey resetlnkicons = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Classes\txtfile\DefaultIcon", true);
                    resetlnkicons.SetValue("", @"%systemroot%\system32\imageres.dll,-102");
                    resetlnkicons.Dispose();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error resetting the .txt icons. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineSoftware""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                try
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Resetting .txt icons requires the clearing of icon cache, which requires restarting explorer. Continue?";
                    dialog.PrimaryButtonText = "Yes";
                    dialog.SecondaryButtonText = "No";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    var result = await dialog.ShowAsync();
                    if (result == ContentDialogResult.Primary)
                    {
                        Process killexplorer = new Process();
                        killexplorer.StartInfo.FileName = "taskkill.exe";
                        killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                        killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        killexplorer.Start();
                        RegistryKey resetlnkicons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon", true);
                        resetlnkicons.SetValue("", @"%systemroot%\system32\imageres.dll,-102");
                        resetlnkicons.Dispose();
                        Process deletefiles = new Process();
                        deletefiles.StartInfo.FileName = "cmd.exe";
                        deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                        deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles.Start();
                        Process deletefiles2 = new Process();
                        deletefiles2.StartInfo.FileName = "cmd.exe";
                        deletefiles2.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\thumb*""";
                        deletefiles2.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles2.Start();
                        await Delay(1000);
                        Process restartexplorer = new Process();
                        restartexplorer.StartInfo.FileName = "cmd.exe";
                        restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                        restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        restartexplorer.Start();
                    }
                } catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error resetting the .txt icons. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private void resetShellKey_Click(object sender, EventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineSoftware"" """ + mountPoint + @"\Windows\System32\config\SOFTWARE" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    RegistryKey resetshellkey = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    resetshellkey.SetValue("Shell", "explorer.exe");
                    resetshellkey.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Shell key has been successfully reset.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error resetting the Shell key. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineSoftware""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                try
                {
                    RegistryKey resetshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    resetshellkey.SetValue("Shell", "explorer.exe");
                    resetshellkey.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Shell key has been successfully reset.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error resetting the Shell key. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    dialog.ShowAsync();
                }
            }
        }

        private async void resetUserinitKey_Click(object sender, EventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineSoftware"" """ + mountPoint + @"\Windows\System32\config\SOFTWARE" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    RegistryKey resetuserinitkey = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    await Delay(500);

                    resetuserinitkey.SetValue("Userinit", @"c:\windows\system32\userinit.exe,");
                    resetuserinitkey.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Userinit key was successfully reset.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error resetting the Userinit key. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineSoftware""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                RegistryKey resetuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                try
                {
                    resetuserinitkey.SetValue("Userinit", @"c:\windows\system32\userinit.exe,");
                    resetuserinitkey.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Userinit key was successfully reset.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error resetting the Userinit key. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private async void reenableUAC_Click(object sender, EventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineSoftware"" """ + mountPoint + @"\Windows\System32\config\SOFTWARE" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    await Delay(500);

                    RegistryKey reenableuac = Registry.LocalMachine.OpenSubKey(@"OfflineSoftware\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    reenableuac.SetValue("EnableLUA", 1);
                    reenableuac.SetValue("ConsentPromptBehaviorUser", 1);
                    reenableuac.SetValue("ConsentPromptBehaviorAdmin", 5);
                    reenableuac.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "User Account Control has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling User Account Control. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineSoftware""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                
                try
                {
                    RegistryKey reenableuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    reenableuac.SetValue("EnableLUA", 1);
                    reenableuac.SetValue("ConsentPromptBehaviorUser", 1);
                    reenableuac.SetValue("ConsentPromptBehaviorAdmin", 5);
                    reenableuac.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "User Account Control has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling User Account Control. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private async void removeKeyboardRestrictions_Click(object sender, EventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineSystem"" """ + mountPoint + @"\Windows\System32\config\SYSTEM" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    await Delay(500);

                    RegistryKey removekeyboardrestrictions = Registry.LocalMachine.OpenSubKey(@"OfflineSystem\CurrentControlSet\Control\Keyboard Layout", true);
                    removekeyboardrestrictions.DeleteValue("Scancode Map");
                    removekeyboardrestrictions.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The keyboard restrictions were removed successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error removing the keyboard restrictions. Were the restrictions even applied in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineSystem""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                try
                {
                    RegistryKey removekeyboardrestrictions = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout", true);
                    removekeyboardrestrictions.DeleteValue("Scancode Map");
                    removekeyboardrestrictions.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The keyboard restrictions were removed successfully. However, you will need to restart to see the changes take effect. Restart now?";
                    dialog.PrimaryButtonText = "Yes";
                    dialog.SecondaryButtonText = "No";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    var result = await dialog.ShowAsync();
                    if (result == ContentDialogResult.Primary)
                    {
                        Process restartcomputer = new Process();
                        restartcomputer.StartInfo.FileName = "shutdown.exe";
                        restartcomputer.StartInfo.Arguments = "-r -t 0";
                        restartcomputer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        restartcomputer.Start();
                    }
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error removing the keyboard restrictions. Were the restrictions even applied in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private async void reenableThemeSettings_Click(object sender, RoutedEventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    await Delay(500);

                    RegistryKey reenablethemesettings = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    reenablethemesettings.DeleteValue("NoThemesTab");
                    reenablethemesettings.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The theme settings were re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the theme settings. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                RegistryKey reenablethemesettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                try
                {
                    reenablethemesettings.DeleteValue("NoThemesTab");
                    reenablethemesettings.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The theme settings were re-enabled successfully. However, you will need to sign out and sign back in in order to see the changes take effect. Sign out now?";
                    dialog.PrimaryButtonText = "Yes";
                    dialog.SecondaryButtonText = "No";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    var result = await dialog.ShowAsync();
                    if (result == ContentDialogResult.Primary)
                    {
                        Process signout = new Process();
                        signout.StartInfo.FileName = "shutdown.exe";
                        signout.StartInfo.Arguments = "-l";
                        signout.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        signout.Start();
                    }
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the theme settings. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private async void reenableWallpaperSettings_Click(object sender, RoutedEventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    await Delay(500);

                    RegistryKey reenablewallpapersettings = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\ActiveDesktop", true);
                    RegistryKey disablesetwallpaperpolicy = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenablewallpapersettings.DeleteValue("NoChangingWallPaper");
                        reenablewallpapersettings.Dispose();
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Information";
                        dialog.Content = "The wallpaper settings were re-enabled successfully.";
                        dialog.PrimaryButtonText = "No";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }
                    catch
                    {
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Error";
                        dialog.Content = "There was an error re-enabling the wallpaper settings. Was it even disabled in the first place? Do I have sufficient permissions?";
                        dialog.PrimaryButtonText = "OK";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        await dialog.ShowAsync();
                    }

                    try
                    {
                        disablesetwallpaperpolicy.DeleteValue("wallpaper");
                        disablesetwallpaperpolicy.Dispose();
                    }
                    catch { }
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the wallpaper settings. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                RegistryKey reenablewallpapersettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\ActiveDesktop", true);
                RegistryKey disablesetwallpaperpolicy = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                try
                {
                    reenablewallpapersettings.DeleteValue("NoChangingWallPaper");
                    reenablewallpapersettings.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The wallpaper settings were re-enabled successfully. However, you will need to sign out and sign back in in order to see the changes to take effect. Sign out now?";
                    dialog.PrimaryButtonText = "Yes";
                    dialog.SecondaryButtonText = "No";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    var result = await dialog.ShowAsync();
                    if (result == ContentDialogResult.Primary)
                    {
                        Process signout = new Process();
                        signout.StartInfo.FileName = "shutdown.exe";
                        signout.StartInfo.Arguments = "-l";
                        signout.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        signout.Start();
                    }
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the wallpaper settings. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }

                try
                {
                    disablesetwallpaperpolicy.DeleteValue("wallpaper");
                    disablesetwallpaperpolicy.Dispose();
                }
                catch { }
            }
        }

        private async void reenableColourSettings_Click(object sender, RoutedEventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    await Delay(500);

                    RegistryKey reenablecoloursettings = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    reenablecoloursettings.DeleteValue("NoDispAppearancePage");
                    reenablecoloursettings.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The colour settings were re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the colour settings. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                RegistryKey reenablecoloursettings = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                try
                {
                    reenablecoloursettings.DeleteValue("NoDispAppearancePage");
                    reenablecoloursettings.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The colour settings were re-enabled successfully. However. you will need to sign out and sign back in in order to see the changes take effect. Sign out now?";
                    dialog.PrimaryButtonText = "Yes";
                    dialog.SecondaryButtonText = "No";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    var result = await dialog.ShowAsync();
                    if (result == ContentDialogResult.Primary)
                    {
                        Process signout = new Process();
                        signout.StartInfo.FileName = "shutdown.exe";
                        signout.StartInfo.Arguments = "-l";
                        signout.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        signout.Start();
                    }
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the colour settings. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private void openRegistryEditor_Click(object sender, RoutedEventArgs e)
        {
            Process.Start("regedit.exe");
        }

        private void openCommandPrompt_Click(object sender, RoutedEventArgs e)
        {
            Process process = new Process();
            process.StartInfo.FileName = "cmd.exe";
            process.StartInfo.Verb = "runas";
            process.Start();
        }

        private void openTaskManager_Click(object sender, RoutedEventArgs e)
        {
            Process.Start("taskmgr.exe");
        }

        private void exit_Click(object sender, RoutedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void systemSettingMenuItem_Checked(object sender, RoutedEventArgs e)
        {
            RegistryKey lightdarkmode = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
            ThemeManager.Current.ApplicationTheme = null;
            lightDarkButton.IsEnabled = false;
            try
            {
                lightdarkmode.DeleteValue("DarkMode");
            } catch {}
            
        }

        private void lightDarkButton_Click(object sender, RoutedEventArgs e)
        {
            RegistryKey lightdarkmode = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
            if (ThemeManager.Current.ApplicationTheme == null || ThemeManager.Current.ApplicationTheme == ApplicationTheme.Light)
            {
                ThemeManager.Current.ApplicationTheme = ApplicationTheme.Dark;
                lightdarkmode.SetValue("DarkMode", 1);
            }
            else
            {
                ThemeManager.Current.ApplicationTheme = ApplicationTheme.Light;
                lightdarkmode.SetValue("DarkMode", 0);
            }
        }

        private void systemSettingMenuItem_Unchecked(object sender, RoutedEventArgs e)
        {
            RegistryKey lightdarkmode = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
            ThemeManager.Current.ApplicationTheme = ApplicationTheme.Light;
            lightDarkButton.IsEnabled = true;
            lightdarkmode.SetValue("DarkMode", 0);
        }

        private async void reenableRun_Click(object sender, RoutedEventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    await Delay(500);

                    RegistryKey reenablerun = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    reenablerun.DeleteValue("NoRun");
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Run has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling Run. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                RegistryKey reenablerun = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                try
                {
                    reenablerun.DeleteValue("NoRun");
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "Run has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling Run. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private async void reenableWinKeys_Click(object sender, RoutedEventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();
                    await Delay(500);

                    RegistryKey reenablewinkeys = Registry.LocalMachine.CreateSubKey(@"OfflineUser\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                    reenablewinkeys.DeleteValue("NoWinKeys");
                    reenablewinkeys.Dispose();
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Windows key has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the Windows key. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                RegistryKey reenablewinkeys = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer", true);
                try
                {
                    reenablewinkeys.DeleteValue("NoWinKeys");
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Information";
                    dialog.Content = "The Windows key has been re-enabled successfully.";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error re-enabling the Windows key. Was it even disabled in the first place? Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private void alwaysOnTop_Checked(object sender, RoutedEventArgs e)
        {
            alwaysOnTopMenuItem.IsChecked = true;
            this.Topmost = true;
            RegistryKey topmost = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
            topmost.SetValue("TopMost", 1);
        }

        private void alwaysOnTop_Unchecked(object sender, RoutedEventArgs e)
        {
            this.Topmost = false;
            RegistryKey topmost = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
            topmost.SetValue("TopMost", 0);
        }

        private void runElevatedMenuItem_Click(object sender, RoutedEventArgs e)
        {
            RunElevated runelevated = new RunElevated();
            runelevated.ShowDialog();
        }

        private void runSystemMenuItem_Click(object sender, RoutedEventArgs e)
        {
            RunSystem runsystem = new RunSystem();
            runsystem.ShowDialog();
        }

        private async void resetMouseButton_Click(object sender, RoutedEventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                try
                {
                    RegistryKey checkOperationsLocation = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool", true);
                    var mountPoint = checkOperationsLocation.GetValue("MountPoint");
                    var username = checkOperationsLocation.GetValue("TargetUsername");
                    Process loadHive = new Process();
                    loadHive.StartInfo.FileName = "reg.exe";
                    loadHive.StartInfo.Arguments = @"load ""HKLM\OfflineUser"" """ + mountPoint + @"\Users\" + username + @"\NTUSER.dat" + @"""";
                    loadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    loadHive.Start();

                    RegistryKey resetmousebutton = Registry.LocalMachine.OpenSubKey(@"OfflineUser\Control Panel\Mouse", true);
                    if (Convert.ToString(resetmousebutton.GetValue("SwapMouseButtons")) == "1")
                    {
                        resetmousebutton.SetValue("SwapMouseButtons", "0");
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Information";
                        dialog.Content = "The primary mouse button has been set to the left mouse button. However, you will need to restart in order to see the changes take effect. Restart now?";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        dialog.PrimaryButtonText = "Yes";
                        dialog.SecondaryButtonText = "No";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        var result = await dialog.ShowAsync();
                        if (result == ContentDialogResult.Primary)
                        {
                            Process restartcomputer = new Process();
                            restartcomputer.StartInfo.FileName = "shutdown.exe";
                            restartcomputer.StartInfo.Arguments = "-r -t 0";
                            restartcomputer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                            restartcomputer.Start();
                        }
                    }
                    else if (Convert.ToString(resetmousebutton.GetValue("SwapMouseButtons")) == "0")
                    {
                        resetmousebutton.SetValue("SwapMouseButtons", "1");
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Information";
                        dialog.Content = "The primary mouse button has been set to the right mouse button. However, you will need to restart in order to see the changes take effect. Restart now?";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        dialog.PrimaryButtonText = "Yes";
                        dialog.SecondaryButtonText = "No";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        var result = await dialog.ShowAsync();
                        if (result == ContentDialogResult.Primary)
                        {
                            Process restartcomputer = new Process();
                            restartcomputer.StartInfo.FileName = "shutdown.exe";
                            restartcomputer.StartInfo.Arguments = "-r -t 0";
                            restartcomputer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                            restartcomputer.Start();
                        }
                    }
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error toggling the primary mouse buttons. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
                Process unloadHive = new Process();
                unloadHive.StartInfo.FileName = "reg.exe";
                unloadHive.StartInfo.Arguments = @"unload ""HKLM\OfflineUser""";
                unloadHive.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                unloadHive.Start();
            }
            else
            {
                RegistryKey resetmousebutton = Registry.CurrentUser.OpenSubKey(@"Control Panel\Mouse", true);
                try
                {
                    if (Convert.ToString(resetmousebutton.GetValue("SwapMouseButtons")) == "1")
                    {
                        resetmousebutton.SetValue("SwapMouseButtons", "0");
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Information";
                        dialog.Content = "The primary mouse button has been set to the left mouse button. However, you will need to restart in order to see the changes take effect. Restart now?";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        dialog.PrimaryButtonText = "Yes";
                        dialog.SecondaryButtonText = "No";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        var result = await dialog.ShowAsync();
                        if (result == ContentDialogResult.Primary)
                        {
                            Process restartcomputer = new Process();
                            restartcomputer.StartInfo.FileName = "shutdown.exe";
                            restartcomputer.StartInfo.Arguments = "-r -t 0";
                            restartcomputer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                            restartcomputer.Start();
                        }
                    }
                    else if (Convert.ToString(resetmousebutton.GetValue("SwapMouseButtons")) == "0")
                    {
                        resetmousebutton.SetValue("SwapMouseButtons", "1");
                        ContentDialog dialog = new ContentDialog();
                        dialog.Title = "Information";
                        dialog.Content = "The primary mouse button has been set to the right mouse button. However, you will need to restart in order to see the changes take effect. Restart now?";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        dialog.PrimaryButtonText = "Yes";
                        dialog.SecondaryButtonText = "No";
                        dialog.DefaultButton = ContentDialogButton.Primary;
                        var result = await dialog.ShowAsync();
                        if (result == ContentDialogResult.Primary)
                        {
                            Process restartcomputer = new Process();
                            restartcomputer.StartInfo.FileName = "shutdown.exe";
                            restartcomputer.StartInfo.Arguments = "-r -t 0";
                            restartcomputer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                            restartcomputer.Start();
                        }
                    }
                }
                catch
                {
                    ContentDialog dialog = new ContentDialog();
                    dialog.Title = "Error";
                    dialog.Content = "There was an error toggling the primary mouse buttons. Do I have sufficient permissions?";
                    dialog.PrimaryButtonText = "OK";
                    dialog.DefaultButton = ContentDialogButton.Primary;
                    await dialog.ShowAsync();
                }
            }
        }

        private void separateDriveText_Click(object sender, RoutedEventArgs e)
        {
            if (separateDriveCheckBox.IsChecked == true)
            {
                separateDriveCheckBox.IsChecked = false;
                SeparateDrive separateDrive = new SeparateDrive();
                separateDrive.RequirementMet += SeparateDrive_RequirementMet;
                separateDrive.ShowDialog();
            } else
            {
                stripCriticalProcess.IsEnabled = true;
            }
        }

        private void SeparateDrive_RequirementMet(object sender, EventArgs e)
        {
            separateDriveCheckBox.IsChecked = true;
            stripCriticalProcess.IsEnabled = false;
        }
    }
}
